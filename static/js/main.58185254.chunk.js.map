{"version":3,"sources":["logo.svg","InputNum/InputNum.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","inputNum","props","react_default","a","createElement","className","cm","inch","type","onChange","convert2Inch","placeholder","min","convert2Cm","kg","pound","convert2Pound","convert2Kg","App","state","convertCm2Inch","event","_this","setState","target","value","parseFloat","convertInch2Cm","convertKg2Pound","convertPound2Kg","InputNum_InputNum","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yLCuBzBC,qBAnBE,SAACC,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SAAIH,EAAMK,GAAV,WAAsBL,EAAMM,KAA5B,YACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASC,SAAUR,EAAMS,aAAcC,YAAY,KAAKC,IAAI,MACxEV,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASC,SAAUR,EAAMY,WAAYF,YAAY,OAAOC,IAAI,OAE5EV,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SAAIH,EAAMa,GAAV,WAAsBb,EAAMc,MAA5B,YACAb,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASC,SAAUR,EAAMe,cAAeL,YAAY,KAAKC,IAAI,MACzEV,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASC,SAAUR,EAAMgB,WAAYN,YAAY,QAAQC,IAAI,UCqD1EM,6MAhEbC,MAAM,CACJb,GAAI,EACJC,KAAM,EACNO,GAAI,EACJC,MAAO,KAQTK,eAAiB,SAACC,GAChBC,EAAKC,SAAS,CACZjB,GAAyB,GAAtBe,EAAMG,OAAOC,MAAaJ,EAAMG,OAAOC,MAAQ,IAClDlB,KAA4B,GAAtBc,EAAMG,OAAOC,MAA8C,QAAjCC,WAAWL,EAAMG,OAAOC,OAAoB,SAIhFE,eAAiB,SAACN,GAChBC,EAAKC,SAAS,CACZjB,GAAyB,GAAtBe,EAAMG,OAAOC,MAA8C,KAAjCC,WAAWL,EAAMG,OAAOC,OAAgB,IACrElB,KAA4B,GAAtBc,EAAMG,OAAOC,MAAaJ,EAAMG,OAAOC,MAAQ,SAIzDG,gBAAkB,SAACP,GACjBC,EAAKC,SAAS,CACZT,GAAyB,GAAtBO,EAAMG,OAAOC,MAAaJ,EAAMG,OAAOC,MAAQ,IAClDV,MAA6B,GAAtBM,EAAMG,OAAOC,MAA8C,QAAjCC,WAAWL,EAAMG,OAAOC,OAAmB,SAIhFI,gBAAkB,SAACR,GACjBC,EAAKC,SAAS,CACZT,GAAyB,GAAtBO,EAAMG,OAAOC,MAA8C,QAAjCC,WAAWL,EAAMG,OAAOC,OAAoB,IACzEV,MAA6B,GAAtBM,EAAMG,OAAOC,MAAaJ,EAAMG,OAAOC,MAAQ,+EAKxD,OACEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,oEACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAC0B,EAAD,CACAxB,GAAIyB,KAAKZ,MAAMb,GACfC,KAAMwB,KAAKZ,MAAMZ,KACjBO,GAAIiB,KAAKZ,MAAML,GACfC,MAAOgB,KAAKZ,MAAMJ,MAClBL,aAAcqB,KAAKX,eACnBP,WAAYkB,KAAKJ,eACjBX,cAAee,KAAKH,gBACpBX,WAAYc,KAAKF,2BAvDTG,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.58185254.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './InputNum.css'\n\n// stateless component: no internal state management\nconst inputNum = (props) => {\n    return (\n        <div className=\"InputNum\">\n            <h3>cm and inch</h3>\n            <div className=\"converter\"> \n                <p>{props.cm} cm  =  {props.inch}  inches</p>\n                <input type=\"number\" onChange={props.convert2Inch} placeholder=\"cm\" min=\"0\"/>\n                <input type=\"number\" onChange={props.convert2Cm} placeholder=\"inch\" min=\"0\"/>\n            </div>\n            <h3>kg and pound</h3>\n            <div className=\"converter\">\n                <p>{props.kg} kg  =  {props.pound}  pounds</p>\n                <input type=\"number\" onChange={props.convert2Pound} placeholder=\"kg\" min=\"0\"/>\n                <input type=\"number\" onChange={props.convert2Kg} placeholder=\"pound\" min=\"0\"/>\n            </div>\n        </div>\n    )\n};\n\nexport default inputNum;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport InputNum from './InputNum/InputNum.js';\n\nclass App extends Component {\n  state={\n    cm: 0,\n    inch: 0,\n    kg: 0,\n    pound: 0,\n  };\n\n  \n      // inch: event.target.value,\n      // inch: event.target.type === 'number'? parseFloat(event.target.value) * 0.393701 : null,\n  \n\n  convertCm2Inch = (event) => {\n    this.setState({\n      cm:event.target.value != 0 ? event.target.value : '0',\n      inch: event.target.value != 0 ? parseFloat(event.target.value) * 0.393701 : '0',\n    })\n  };\n\n  convertInch2Cm = (event) => {\n    this.setState({\n      cm:event.target.value != 0 ? parseFloat(event.target.value) * 2.54 : '0',\n      inch: event.target.value != 0 ? event.target.value : '0', \n    })\n  };\n\n  convertKg2Pound = (event) => {\n    this.setState({\n      kg:event.target.value != 0 ? event.target.value : '0',\n      pound: event.target.value != 0 ? parseFloat(event.target.value) * 2.20462 : '0',\n    })\n  };\n\n  convertPound2Kg = (event) => {\n    this.setState({\n      kg:event.target.value != 0 ? parseFloat(event.target.value) * 0.453592 : '0',\n      pound: event.target.value != 0 ? event.target.value : '0', \n    })\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hi , I'am a Unit Converter~ (ฅ´ω`ฅ) </h1>\n        <hr></hr>\n        <div className=\"Body\">\n          <InputNum \n          cm={this.state.cm} \n          inch={this.state.inch}\n          kg={this.state.kg} \n          pound={this.state.pound}\n          convert2Inch={this.convertCm2Inch}\n          convert2Cm={this.convertInch2Cm}\n          convert2Pound={this.convertKg2Pound}\n          convert2Kg={this.convertPound2Kg}>\n          </InputNum>\n\n        </div>\n            \n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}